#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# This file is part of Tatyana.
#
# Tatyana is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Tatyana is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

import sys
sys.path.insert(0, "modules/")

from generator import generateMessage
from mailer import sendMessage

from dotenv import load_dotenv
import telebot
from telebot import types
import os
import json

load_dotenv()

bot = telebot.TeleBot(os.getenv("BOT_TOKEN"), parse_mode="MARKDOWN")


appeal_dict = {}

class Appeal:
    def __init__(self, city):
        self.city = city
        self.theme = None
        self.address = None
        self.attachment = None


# Handle "/start" and "/help" # TODO: remove /help, add /cancel
@bot.message_handler(commands=["help", "start"])
def send_welcome(message):
    msg = bot.reply_to(message, """\
–ü—Ä–∏–≤–µ—Ç! üëã

–ú–µ–Ω—è –∑–æ–≤—É—Ç –¢–∞—Ç—å—è–Ω–∞. –î–ª—è –≤–∞—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –¢–∞–Ω—è :-)

–Ø —Ä–∞–±–æ—Ç–∞—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–∞—Ä—ë–º –≤ –î–≤–∏–∂–µ–Ω–∏–∏ ¬´–î–∏–∞–ª–æ–≥¬ª –∏ –ø–æ–º–æ–≥–∞—é –≥—Ä–∞–∂–¥–∞–Ω–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –æ—Ä–≥–∞–Ω—ã –º–µ—Å—Ç–Ω–æ–≥–æ —Å–∞–º–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

–°–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞—è–≤–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –≥. –û–∑—ë—Ä—ã –∏ –≥. –ö–æ–ª–æ–º–Ω–∞.

`–¢–∞—Ç—å—è–Ω–∞`
""", reply_markup=json.dumps({'remove_keyboard': True}))
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton("–û–∑—ë—Ä—ã"), types.KeyboardButton("–ö–æ–ª–æ–º–Ω–∞"),
        types.KeyboardButton("–ú–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚ùé"),
    )
    msg = bot.reply_to(message, """\
–î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏–º –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥.

–ì–¥–µ –≤—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?

`–¢–∞—Ç—å—è–Ω–∞`
""", reply_markup=keyboard)
    bot.register_next_step_handler(msg, confirm_city_name_step)


def confirm_city_name_step(message):
    try:
        chat_id = message.chat.id
        city = message.text
        appeal = Appeal(city)
        appeal_dict[chat_id] = appeal
        if appeal.city == "–ú–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚ùé":
            msg = bot.reply_to(message, """\
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ —è –Ω–µ —Å–º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ :-(

–°–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞—è–≤–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –≥. –û–∑—ë—Ä—ã –∏ –≥. –ö–æ–ª–æ–º–Ω–∞.

–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ /start, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑.

`–¢–∞—Ç—å—è–Ω–∞`
""", reply_markup=json.dumps({'remove_keyboard': True}))
            return
        elif not appeal.city in ["–û–∑—ë—Ä—ã", "–ö–æ–ª–æ–º–Ω–∞"]:
            keyboard = telebot.types.ReplyKeyboardMarkup(True)
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add(
                types.KeyboardButton("–û–∑—ë—Ä—ã"), types.KeyboardButton("–ö–æ–ª–æ–º–Ω–∞"),
                types.KeyboardButton("–ú–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚ùé"),
            )
            msg = bot.reply_to(message, """\
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?

`–¢–∞—Ç—å—è–Ω–∞`
""", reply_markup=keyboard)
            bot.register_next_step_handler(msg, confirm_city_name_step)
            return
        else:
            keyboard = telebot.types.ReplyKeyboardMarkup(True)
            keyboard.row("–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ", "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ üîÑ")
            msg = bot.reply_to(message, """\
–í—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥. {}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ?

`–¢–∞—Ç—å—è–Ω–∞`
""".format(appeal.city), reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_city_name_step)
        return
    except Exception as e:
        bot.reply_to(message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ confirm", reply_markup=json.dumps({'remove_keyboard': True}))


def process_city_name_step(message):
    chat_id = message.chat.id
    appeal = appeal_dict[chat_id]
    try:
        if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ üîÑ":
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add(
                types.KeyboardButton("–û–∑—ë—Ä—ã"), types.KeyboardButton("–ö–æ–ª–æ–º–Ω–∞"),
                types.KeyboardButton("–ú–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚ùé"),
            )
            msg = bot.reply_to(message, """\
–ì–¥–µ –≤—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?

`–¢–∞—Ç—å—è–Ω–∞`
""", reply_markup=keyboard)
            bot.register_next_step_handler(msg, confirm_city_name_step)
            return
        elif message.text == "–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ":
            if appeal.city == "–ú–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚ùé":
                msg = bot.reply_to(message, """\
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ —è –Ω–µ —Å–º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ :-(

–°–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞—è–≤–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –≥. –û–∑—ë—Ä—ã –∏ –≥. –ö–æ–ª–æ–º–Ω–∞.

–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ /start, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑.

`–¢–∞—Ç—å—è–Ω–∞`
""", reply_markup=json.dumps({'remove_keyboard': True}))
                return
            elif not appeal.city in ["–û–∑—ë—Ä—ã", "–ö–æ–ª–æ–º–Ω–∞"]:
                keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
                keyboard.add(
                    types.KeyboardButton("–û–∑—ë—Ä—ã"), types.KeyboardButton("–ö–æ–ª–æ–º–Ω–∞"),
                    types.KeyboardButton("–ú–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚ùé"),
                )
                msg = bot.reply_to(message, """\
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?

`–¢–∞—Ç—å—è–Ω–∞`
""", reply_markup=keyboard)
                bot.register_next_step_handler(msg, confirm_city_name_step)
                return
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add(
                types.KeyboardButton("–†–∞–∑–±—Ä–æ—Å–∞–Ω–Ω—ã–π –º—É—Å–æ—Ä"), types.KeyboardButton("–ù–µ –≥–æ—Ä–∏—Ç —Ñ–æ–Ω–∞—Ä—å"),
                types.KeyboardButton("–í–∞–Ω–¥–∞–ª–∏–∑–º"),          types.KeyboardButton("–ù–µ –ø—Ä–∏—à—ë–ª –∞–≤—Ç–æ–±—É—Å"),
                types.KeyboardButton("–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"),     types.KeyboardButton("–ü–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Ä–æ–≥–∏"),
                types.KeyboardButton("–ù–µ—Ç –ø–∞–Ω–¥—É—Å–∞"),        types.KeyboardButton("–û–≥–æ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–≤–æ–¥–∞"),
                types.KeyboardButton("–ë—Ä–æ–¥—è—á–∏–µ —Å–æ–±–∞–∫–∏"),    types.KeyboardButton("–ü—Ä–æ—Å—Ä–æ—á–∫–∞"),
            )
            msg = bot.reply_to(message, """\
–°—É–ø–µ—Ä!

–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –≤–∞–º –ø–æ–º–æ—á—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ?

`–¢–∞—Ç—å—è–Ω–∞`
    """, reply_markup=keyboard)

            bot.register_next_step_handler(msg, confirm_theme_step)
            return
        else:
            keyboard = telebot.types.ReplyKeyboardMarkup(True)
            keyboard.row("–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ", "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ üîÑ")
            msg = bot.reply_to(message, """\
–í—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥. {}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ?

`–¢–∞—Ç—å—è–Ω–∞`
""".format(appeal.city), reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_city_name_step)
        return
    except Exception as e:
       bot.reply_to(message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=json.dumps({'remove_keyboard': True}))


def confirm_theme_step(message):
    try:
        chat_id = message.chat.id
        appeal = appeal_dict[chat_id]
        appeal.theme = message.text
        if not appeal.theme in [
                "–†–∞–∑–±—Ä–æ—Å–∞–Ω–Ω—ã–π –º—É—Å–æ—Ä", "–ù–µ –≥–æ—Ä–∏—Ç —Ñ–æ–Ω–∞—Ä—å",
                "–í–∞–Ω–¥–∞–ª–∏–∑–º",          "–ù–µ –ø—Ä–∏—à—ë–ª –∞–≤—Ç–æ–±—É—Å",
                "–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",     "–ü–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Ä–æ–≥–∏",
                "–ù–µ—Ç –ø–∞–Ω–¥—É—Å–∞",        "–û–≥–æ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–≤–æ–¥–∞",
                "–ë—Ä–æ–¥—è—á–∏–µ —Å–æ–±–∞–∫–∏",    "–ü—Ä–æ—Å—Ä–æ—á–∫–∞"
            ]:
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add(
                types.KeyboardButton("–†–∞–∑–±—Ä–æ—Å–∞–Ω–Ω—ã–π –º—É—Å–æ—Ä"), types.KeyboardButton("–ù–µ –≥–æ—Ä–∏—Ç —Ñ–æ–Ω–∞—Ä—å"),
                types.KeyboardButton("–í–∞–Ω–¥–∞–ª–∏–∑–º"),          types.KeyboardButton("–ù–µ –ø—Ä–∏—à—ë–ª –∞–≤—Ç–æ–±—É—Å"),
                types.KeyboardButton("–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"),     types.KeyboardButton("–ü–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Ä–æ–≥–∏"),
                types.KeyboardButton("–ù–µ—Ç –ø–∞–Ω–¥—É—Å–∞"),        types.KeyboardButton("–û–≥–æ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–≤–æ–¥–∞"),
                types.KeyboardButton("–ë—Ä–æ–¥—è—á–∏–µ —Å–æ–±–∞–∫–∏"),    types.KeyboardButton("–ü—Ä–æ—Å—Ä–æ—á–∫–∞"),
            )
            msg = bot.reply_to(message, """\
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ —è –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.

–ú–æ–∂–µ—Ç, —Å–æ—Å—Ç–∞–≤–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥—É—é —Ç–µ–º—É?

`–¢–∞—Ç—å—è–Ω–∞`
""", reply_markup=keyboard)
            bot.register_next_step_handler(msg, confirm_theme_step)
            return
        else:
            keyboard = telebot.types.ReplyKeyboardMarkup(True)
            keyboard.row("–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ", "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É üîÑ")
            msg = bot.reply_to(message, """\
–ë—É–¥–µ–º —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É ¬´{}¬ª, –ø—Ä–∞–≤–∏–ª—å–Ω–æ?

`–¢–∞—Ç—å—è–Ω–∞`
""".format(appeal.theme), reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_theme_step)
        return
    except Exception as e:
        bot.reply_to(message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ confirm", reply_markup=json.dumps({'remove_keyboard': True}))


def process_theme_step(message):
    chat_id = message.chat.id
    appeal = appeal_dict[chat_id]
    try:
        if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É üîÑ":
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            keyboard.add(
                types.KeyboardButton("–†–∞–∑–±—Ä–æ—Å–∞–Ω–Ω—ã–π –º—É—Å–æ—Ä"), types.KeyboardButton("–ù–µ –≥–æ—Ä–∏—Ç —Ñ–æ–Ω–∞—Ä—å"),
                types.KeyboardButton("–í–∞–Ω–¥–∞–ª–∏–∑–º"),          types.KeyboardButton("–ù–µ –ø—Ä–∏—à—ë–ª –∞–≤—Ç–æ–±—É—Å"),
                types.KeyboardButton("–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"),     types.KeyboardButton("–ü–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Ä–æ–≥–∏"),
                types.KeyboardButton("–ù–µ—Ç –ø–∞–Ω–¥—É—Å–∞"),        types.KeyboardButton("–û–≥–æ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–≤–æ–¥–∞"),
                types.KeyboardButton("–ë—Ä–æ–¥—è—á–∏–µ —Å–æ–±–∞–∫–∏"),    types.KeyboardButton("–ü—Ä–æ—Å—Ä–æ—á–∫–∞"),
            )
            msg = bot.reply_to(message, """\
–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –≤–∞–º –ø–æ–º–æ—á—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ?

`–¢–∞—Ç—å—è–Ω–∞`
    """, reply_markup=keyboard)
            bot.register_next_step_handler(msg, confirm_theme_step)
            return
        elif message.text == "–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ":
            if not appeal.theme in [
                    "–†–∞–∑–±—Ä–æ—Å–∞–Ω–Ω—ã–π –º—É—Å–æ—Ä", "–ù–µ –≥–æ—Ä–∏—Ç —Ñ–æ–Ω–∞—Ä—å",
                    "–í–∞–Ω–¥–∞–ª–∏–∑–º",          "–ù–µ –ø—Ä–∏—à—ë–ª –∞–≤—Ç–æ–±—É—Å",
                    "–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",     "–ü–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Ä–æ–≥–∏",
                    "–ù–µ—Ç –ø–∞–Ω–¥—É—Å–∞",        "–û–≥–æ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–≤–æ–¥–∞",
                    "–ë—Ä–æ–¥—è—á–∏–µ —Å–æ–±–∞–∫–∏",    "–ü—Ä–æ—Å—Ä–æ—á–∫–∞"
                ]:
                keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
                keyboard.add(
                    types.KeyboardButton("–†–∞–∑–±—Ä–æ—Å–∞–Ω–Ω—ã–π –º—É—Å–æ—Ä"), types.KeyboardButton("–ù–µ –≥–æ—Ä–∏—Ç —Ñ–æ–Ω–∞—Ä—å"),
                    types.KeyboardButton("–í–∞–Ω–¥–∞–ª–∏–∑–º"),          types.KeyboardButton("–ù–µ –ø—Ä–∏—à—ë–ª –∞–≤—Ç–æ–±—É—Å"),
                    types.KeyboardButton("–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"),     types.KeyboardButton("–ü–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Ä–æ–≥–∏"),
                    types.KeyboardButton("–ù–µ—Ç –ø–∞–Ω–¥—É—Å–∞"),        types.KeyboardButton("–û–≥–æ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–≤–æ–¥–∞"),
                    types.KeyboardButton("–ë—Ä–æ–¥—è—á–∏–µ —Å–æ–±–∞–∫–∏"),    types.KeyboardButton("–ü—Ä–æ—Å—Ä–æ—á–∫–∞"),
                )
                msg = bot.reply_to(message, """\
    –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ —è –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.

    –ú–æ–∂–µ—Ç, —Å–æ—Å—Ç–∞–≤–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥—É—é —Ç–µ–º—É?

    `–¢–∞—Ç—å—è–Ω–∞`
    """, reply_markup=keyboard)
                bot.register_next_step_handler(msg, confirm_theme_step)
                return
            msg = bot.reply_to(message, """\
–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —è —É–∫–∞–∂—É –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏.

–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–≤ ‚Äî –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.

`–¢–∞—Ç—å—è–Ω–∞`
    """, reply_markup=json.dumps({'remove_keyboard': True}))
            bot.register_next_step_handler(msg, confirm_address_step)
            return
        else:
            keyboard = telebot.types.ReplyKeyboardMarkup(True)
            keyboard.row("–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ", "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É üîÑ")
            msg = bot.reply_to(message, """\
–ë—É–¥–µ–º —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É ¬´{}¬ª, –ø—Ä–∞–≤–∏–ª—å–Ω–æ?

`–¢–∞—Ç—å—è–Ω–∞`
""".format(appeal.theme), reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_theme_step)
        return
    except Exception as e:
       bot.reply_to(message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=json.dumps({'remove_keyboard': True}))


def confirm_address_step(message):
    try:
        chat_id = message.chat.id
        appeal = appeal_dict[chat_id]
        appeal.address = message.text
        if len(appeal.address.split("\n")) == 1:
            address        = appeal.address.splitlines()
            address_string = ["—ç—Ç–æ—Ç", "–∞–¥—Ä–µ—Å"]
            address_string.append("‚Ä¢" + " " + appeal.address)
        elif len(appeal.address.split("\n")) > 1:
            address        = appeal.address.splitlines()
            address_string = ["—ç—Ç–∏", "–∞–¥—Ä–µ—Å–∞"]
            address_string.append("\n".join(list(map(lambda orig_string: "‚Ä¢" + " " + orig_string, address))))
        keyboard = telebot.types.ReplyKeyboardMarkup(True)
        keyboard.row("–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ", "–ò–∑–º–µ–Ω–∏—Ç—å {} üîÑ".format(address_string[1]))
        msg = bot.reply_to(message, """\
–Ø —É–∫–∞–∂—É –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏ {} {}:

_{}_

–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª–∞?

`–¢–∞—Ç—å—è–Ω–∞`
""".format(address_string[0],
           address_string[1],
           address_string[2]), reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_address_step)
        return
    except Exception as e:
        bot.reply_to(message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=json.dumps({'remove_keyboard': True}))


def process_address_step(message):
    chat_id = message.chat.id
    appeal = appeal_dict[chat_id]
    try:
        if (message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å üîÑ"
        or message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å–∞ üîÑ"):
            msg = bot.reply_to(message, """\
–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —è —É–∫–∞–∂—É –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏.

–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–≤ ‚Äî –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.

`–¢–∞—Ç—å—è–Ω–∞`
    """, reply_markup=json.dumps({'remove_keyboard': True}))
            bot.register_next_step_handler(msg, confirm_address_step)
            return
        else:
            keyboard = telebot.types.ReplyKeyboardMarkup(True)
            keyboard.row("–£ –º–µ–Ω—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üì∏")
            msg = bot.reply_to(message, """\
–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –≤–∏–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞.

–ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ _¬´–£ –º–µ–Ω—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üì∏¬ª_.

`–¢–∞—Ç—å—è–Ω–∞`
""".format(appeal.theme), reply_markup=keyboard)
            bot.register_next_step_handler(msg, confirm_attachment_step)
            return
    except Exception as e:
       bot.reply_to(message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=json.dumps({'remove_keyboard': True}))


# attachments!
def confirm_attachment_step(message):
    try:
        chat_id = message.chat.id
        appeal = appeal_dict[chat_id]
        appeal.address = message.text
        if len(appeal.address.split("\n")) == 1:
            address        = appeal.address.splitlines()
            address_string = ["—ç—Ç–æ—Ç", "–∞–¥—Ä–µ—Å"]
            address_string.append("‚Ä¢" + " " + appeal.address)
        elif len(appeal.address.split("\n")) > 1:
            address        = appeal.address.splitlines()
            address_string = ["—ç—Ç–∏", "–∞–¥—Ä–µ—Å–∞"]
            address_string.append("\n".join(list(map(lambda orig_string: "‚Ä¢" + " " + orig_string, address))))
        keyboard = telebot.types.ReplyKeyboardMarkup(True)
        keyboard.row("–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ", "–ò–∑–º–µ–Ω–∏—Ç—å {} üîÑ".format(address_string[1]))
        msg = bot.reply_to(message, """\
–Ø —É–∫–∞–∂—É –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏ {} {}:

_{}_

–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª–∞?

`–¢–∞—Ç—å—è–Ω–∞`
""".format(address_string[0],
           address_string[1],
           address_string[2]), reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_address_step)
        return
    except Exception as e:
        bot.reply_to(message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=json.dumps({'remove_keyboard': True}))


def process_attachment_step(message):
    chat_id = message.chat.id
    appeal = appeal_dict[chat_id]
    try:
        if (message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å üîÑ"
        or message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å–∞ üîÑ"):
            msg = bot.reply_to(message, """\
–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —è —É–∫–∞–∂—É –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏.

–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–≤ ‚Äî –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.

`–¢–∞—Ç—å—è–Ω–∞`
    """, reply_markup=json.dumps({'remove_keyboard': True}))
            bot.register_next_step_handler(msg, confirm_address_step)
            return
        else:
            keyboard = telebot.types.ReplyKeyboardMarkup(True)
            keyboard.row("–£ –º–µ–Ω—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üì∏")
            msg = bot.reply_to(message, """\
–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –≤–∏–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞.

–ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ _¬´–£ –º–µ–Ω—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üì∏¬ª_.

`–¢–∞—Ç—å—è–Ω–∞`
""".format(appeal.theme), reply_markup=keyboard)
            bot.register_next_step_handler(msg, process_attachment_step)
            return
    except Exception as e:
       bot.reply_to(message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=json.dumps({'remove_keyboard': True}))


def process_sex_step(message):
    try:
        chat_id = message.chat.id
        sex = message.text
        user = appeal_dict[chat_id]
        if (sex == u"Male") or (sex == u"Female"):
            user.sex = sex
        else:
            raise Exception("Unknown sex")
        bot.send_message(chat_id, "Nice to meet you " + user.name + "\n Age:" + str(user.age) + "\n Sex:" + user.sex)
    except Exception as e:
        bot.reply_to(message, "oooops", reply_markup=json.dumps({'remove_keyboard': True}))


@bot.message_handler(func=lambda m: True)
def echo_all(message):
    bot.reply_to(message, message.text)


# –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ø–∏–∏ –ø–∏—Å—å–º–∞
# + –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—á–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, —á—Ç–æ –Ω—É–∂–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∞–¥—Ä–µ—Å —ç–ª. –ø–æ—á—Ç—ã

# –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? <–û—Ç–ø—Ä–∞–≤–ª—è–µ–º> <–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä>

# Enable saving next step handlers to file "./.handlers-saves/step.save".
# Delay=2 means that after any change in next step handlers (e.g. calling register_next_step_handler())
# saving will hapen after delay 2 seconds.
bot.enable_save_next_step_handlers(delay=2)

# Load next_step_handlers from save file (default "./.handlers-saves/step.save")
# WARNING It will work only if enable_save_next_step_handlers was called!
bot.load_next_step_handlers()

bot.infinity_polling()

# subject, message = generateMessage("trash", "–ê–≤—Ç–æ–±—É—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ¬´–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏¬ª\n–ê–≤—Ç–æ–±—É—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ¬´–î–æ–º –±—ã—Ç–∞¬ª\n–ê–≤—Ç–æ–±—É—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ¬´–î–æ–º ‚Ññ 15¬ª\n–ê–≤—Ç–æ–±—É—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ¬´–§–∏—Ä–º–∞ –û–∫–∞¬ª\n–ê–≤—Ç–æ–±—É—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ¬´–û–±—â–µ–∂–∏—Ç–∏—è¬ª")
# sendMessage(subject, message)
